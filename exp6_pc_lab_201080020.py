# -*- coding: utf-8 -*-
"""Exp6_PC_Lab_201080020

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w3cTJr5VOGLgdopoqzdNLQ_BEgHRuHA1
"""

!nvcc --version

!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

# Implement Parallel Traveling Salesman Problem using OpenMP

code = """
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <omp.h>

#define MAX_N 16

int n;
int dist[MAX_N][MAX_N];

int visited[MAX_N];
int curr_path[MAX_N];
int min_path[MAX_N];
int min_cost = INT_MAX;

void tsp(int curr_cost, int curr_pos, int level)
{
    if (level == n) {
        // Visited all cities
        curr_cost += dist[curr_pos][0];
        if (curr_cost < min_cost) {
            min_cost = curr_cost;
            #pragma omp critical
            {
                for (int i = 0; i < n; i++) {
                    min_path[i] = curr_path[i];
                }
            }
        }
        return;
    }
    for (int i = 1; i < n; i++) {
        if (!visited[i]) {
            visited[i] = 1;
            curr_path[level] = i;
            tsp(curr_cost + dist[curr_pos][i], i, level + 1);
            visited[i] = 0;
        }
    }
}

int main()
{
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    printf("Enter the distances between the cities:\\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }

    visited[0] = 1;
    curr_path[0] = 0;
    tsp(0, 0, 1);

    printf("Path: %d", min_path[0] + 1);
    for (int i = 1; i < n; i++) {
        printf("->%d", min_path[i] + 1);
    }
    printf("->%d\\n", min_path[0] + 1);
    printf("Minimum Cost/Minimum weight Hamiltonian Cycle: %d\\n", min_cost);

    return 0;
}



"""

text_file = open("travel_salesman.c","w")
text_file.write(code)
text_file.close()

!gcc -o Travelling_salesman -fopenmp travel_salesman.c

!./Travelling_salesman

