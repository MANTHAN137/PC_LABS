# -*- coding: utf-8 -*-
"""201080020_PC_Assignemnt5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSzSAfjrp1yQ4e59Bq8m_5Sbc4KPh1IY
"""

!apt list --installed

!nvcc --version

##!gcc -o Dijkstra -fopenmp Dijkstra.c

code ="""
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define INF 999999

void dijkstra(int** graph, int n, int start)
{
    int* dist = (int*)malloc(n * sizeof(int));
    int* visited = (int*)malloc(n * sizeof(int));

    // initialize the distance array and visited array
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }

    // set the distance to the starting node as 0
    dist[start] = 0;

    // find shortest path for all vertices
    #pragma omp parallel for
    for (int count = 0; count < n - 1; count++) {
        // find the vertex with minimum distance value
        int min_dist = INF;
        int u;
        #pragma omp parallel for
        for (int v = 0; v < n; v++) {
            if (!visited[v] && dist[v] <= min_dist) {
                min_dist = dist[v];
                u = v;
            }
        }

        // mark the selected vertex as visited
        visited[u] = 1;

        // update the distance values of the adjacent vertices of the selected vertex
        #pragma omp parallel for
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // print the distances of all vertices from the starting vertex
    printf("Vertex \\t Distance from Start\\n");
    for (int i = 0; i < n; i++) {
        printf("%d \\t\\t %d\\n", i, dist[i]);
    }

    free(dist);
    free(visited);
}

int main()
{
    int n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    int** graph = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        graph[i] = (int*)malloc(n * sizeof(int));
    }

    printf("Enter the adjacency matrix:\\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the starting vertex: ");
    scanf("%d", &start);

    dijkstra(graph, n, start);

    for (int i = 0; i < n; i++) {
        free(graph[i]);
    }
    free(graph);

    return 0;
}

"""

text_file=open("Dijkstra.c","w")
text_file.write(code)
text_file.close()

!gcc -o Dijkstra -fopenmp Dijkstra.c

"""[link text](https://cdn1.byjus.com/wp-content/uploads/2020/08/Adjacency-Matrix-02.png)"""

!./Dijkstra

0 3 0 0 0 12 0
3 0 5 0 0 0 4
0 5 0 6 0 0 4
0 0 6 0 1 0 0
0 0 0 1 0 10 7
12 0 0 0 10 0 2
0 4 3 0 7 2 0